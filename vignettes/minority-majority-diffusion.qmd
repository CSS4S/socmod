---
editor: 
  markdown: 
    wrap: 72
author: Matt Turner
title: "Prominent minority groups and transitive majority groups promote diffusion of adaptations"
bibliography: /Users/mt/workspace/Writing/library.bib

eval: FALSE
---
```{r, SETUP}
library(ggnetwork)

devtools::load_all()
library(socmod)
```

Communities most affected by climate change deserve to be included in
promoting sustainable adaptive behavior. In the South Pacific Island
nations, Indigenous peoples may be a minority in terms of population
size, but they could have a great impact on climate change adaptation.
Indigenous peoples in a place have been adapting to a changing climate
for possibly thousands of years.

Communities tend to have distinguishable groups, even if on some measures a
population seems homogeneous. 
If this *group structure* does not affect the diffusion of
adaptations, we could leave it out to focus on other, more
significant factors. However, the South Pacific Island case presents an
important example of when it is important to include this group
structure.

*Group structure*, in the South Pacific Islands case and in general,
defined by the size of each group and how frequently groups interact
with others from *within* their own group or *between* groups. These
frequencies are set by the *homophily* of each group, which measures how
much more frequent within-group versus between-group interactions are.
Homophily arises due to personal *choice*, called *choice homophily*, or
involuntarily due to circumstance, called *induced homophily*
[@Kossinets2009]. If you like a certain type of food, and you go to a
restaurant that serves that food, your preference for that food leads
you to encounter others with similar taste, an instance of *choice
homophily*.

For some demographic group divisions, such as socio-economic status and
race, homophily is heavily induced by, for example, historical legal and
other obstacles to home ownership and other economic opportunity that
led to economically and racially segregated neighborhoods, even after
"segregation" became illegal. In these cases, *induced homophily* would
dominate, say, in explaining why certain people of certain races tend to
be geographically co-located, i.e., geographically *assorted*, since we
can assume that for most people this was not a conscious choice.

In the models in this example we do not distinguish between types of
homophily. They *are* important to distinguish when we go to interpret
our models in real-world situations. Interpreting results like this can
help guide real-world measurements of homophily by guiding researcher
intuition for which measurements may the most significant.

In 2023 some colleagues and I developed an agent-based model of
adaptation diffusion in a model population composed of a minority group
and a majority group and analyzed how the *asymmetric homophily* of each
group affected the diffusion of a model adaptation. *Homophily* is the
degree to which We found that diffusion could be promoted by harnessing
minority knowledge of adaptive behaviors at the outset of some
hypothetical intervention, while majority groups could support
adaptation by rapid spread in tight-knit communities [@Turner2023].


$$
\Pr(\text{Neighbor is in own group}) = \frac{1 + h}{2}
$$

The probability the agent learns from an outgroup is just the complement
of this. In this setup there is only one outgroup, but the `make_homophily_network` can create symmetric or asymmetric networks with an arbitrary number of groups, provided the network is constructable given the homophily values and group sizes.

## Computational experiment

In the next few blocks we demonstrate how to set up a full computational
experiment and run a full set of simulation trials, with several trials run
per parameter setting. We then explain how to define many of the components
we used in constructing this experiment structure. 
We then explain how to  specify all components passed to `run_trials`, starting
with the minority-majority model generator function passed as the first argument to
`run_trials`. The other arguments passed to `run_trials` specify model
parameters, including any systematically varied parameters across conditions 
in computational experiments.

```{r, eval = FALSE}
# Specify model parameters
n_agents = 100
minority_fraction = 0.2
mean_degree = 15
homophily_vals = c(-0.9, -0.75, -0.5, -0.25, 0.0, 0.25, 0.5, 0.75, 0.9)
adaptive_fitness = 1.2
start_group = "Both"

# Build run_trials
trials <- run_trials(
  
  # Provide the agent-based model generator function first
  gen_homophily_abm, 
  
  # Model specification parameters
  n_agents = n_agents, 
  homophily = homophily_vals,
  minority_fraction = minority_fraction, 
  mean_degree = mean_degree,
  adaptive_fitness = adaptive_fitness, 
  start_group = start_group,
  
  # Trial parameter settings: how many trials per param and when to stop sims
  n_trials_per_param = 20,
  stop = socmod::fixated, 
  
  # System configuration: show progress and optionally sync/overwrite to file
  .progress = TRUE, 
  syncfile = "small-homoph.RData", 
  # overwrite = TRUE
)
```

In the `run_trials` call, the `homophily_vals` are a vector of nine nearly
evenly spaced values. The rest take only one value for our experiments. A grid
of parameter values, i.e., the Cartesian product of all model parameters,
are calculated within the `run_trials` procedure using the `dplyr::crossing`
function.

Here is how we define the agent-based model generating function that `run_trial`
instantiates using each row of the parameter `tibble` returned by
`dplyr::crossing`:

```{r}
gen_homophily_abm <- function(param_row) {

  # Extract all parameters used in ABM construction with short var names
  pr <- param_row; N <- pr$n_agents; m <- pr$minority_fraction
  k <- pr$mean_degree; h <- pr$homophily 
  f_A <- pr$adaptive_fitness; start_group <- pr$start_group
  # Calculate number of minorty and majority agents
  N_min <- round(N * m)
  N_maj <- N - N_min
  
  # Initialize agent-based model with the homophily graph, ensuring connected graph
  h_graph <- make_homophily_network(
      group_sizes = c(N_min, N_maj),
      mean_degree = k,
      homophily = h
    )
  # The network construction is random, doesn't always create connected network;
  # re-create h_graph until it's connected
  while (!igraph::is_connected(h_graph)) {
    print("Not yet connected, attempting to create connected homophily network")
    
    # Create the homophily network given the parameters
    h_graph <- socmod::make_homophily_network(
      group_sizes = c(N_min, N_maj),
      mean_degree = k,
      homophily = h
    )
  }
  
  # Create ABM with guaranteed-connected h_graph
  abm <- socmod::make_abm(graph = h_graph, mean_degree = k, group_sizes = c(N_min, N_maj), homophily = h)
  
  minority_idxs <- which(igraph::V(abm$get_network())$group == 1)
  majority_idxs <- which(igraph::V(abm$get_network())$group == 2)

  abm$set_parameter("minority_idxs", minority_idxs)
  abm$set_parameter("majority_idxs", majority_idxs)

  # Set agent Group attributes
  purrr::walk(abm$agents[minority_idxs], \(a) a$set_attribute("Group", "Minority"))
  purrr::walk(abm$agents[majority_idxs], \(a) a$set_attribute("Group", "Majority"))

  # Initialize one agent from one or each group with adaptive behavior 
  params <- abm$get_parameters()$as_list()
  if (start_group == "Minority" || start_group == "Both") {
    a_min <- sample(abm$agents[minority_idxs], 1)[[1]]
    a_min$set_behavior("Adaptive")
    a_min$set_fitness(f_A) 
  }
  if (start_group == "Majority" || start_group == "Both") {
    a_maj <- sample(abm$agents[majority_idxs], 1)[[1]]
    a_maj$set_behavior("Adaptive")
    a_maj$set_fitness(f_A)
  }
  
  return (abm)
}

make_example_homophily_abm <- function(n_agents = 50, minority_fraction = 0.1,
                                       mean_degree = 5, homophily = 0.2,
                                       adaptive_fitness = 1.2, 
                                       start_group = "Both") {
  
  param_row <- tibble::as_tibble(as.list(environment()))
  print(param_row)
  return (gen_homophily_abm(param_row))                                      
}

abm <- make_example_homophily_abm()
plot_homophily_network_adoption(abm)
```


