---
title: "Model parameter flow"
format: html
---

<!--```{r setup, include=FALSE}-->
```{r}
devtools::load_all("../")

# library(socmod)
```


## 1. Create ModelParameters


```{r}
mps <- make_model_parameters()

params_list <- mps$as_list()
print(params_list)

mps <- make_model_parameters(
  n_agents = 5,
  adoption_rate = 0.8,
  drop_rate = 0.1,
  stubbornness = 0.0
)

print(mps$as_list())


```

## Alternative: create ModelParameters from a parameter list

```{r}
params_list <- list(
  n_agents = 5,
  adoption_rate = 0.8,
  drop_rate = 0.1,
  stubbornness = 0.0
)

mps <- do.call(make_model_parameters, params_list)

print(mps$as_list())
```

## 2. Built-in Learning Strategies

```{r}
success_strategy <- success_bias_learning_strategy
frequency_strategy <- frequency_bias_learning_strategy
contagion_strategy <- contagion_learning_strategy

success_strategy$get_label()
frequency_strategy$get_label()
contagion_strategy$get_label()

mps <- make_model_parameters(
  n_agents = 5,
  learning_strategy = contagion_strategy,
  adoption_rate = 0.8,
  drop_rate = 0.1,
  stubbornness = 0.0
)
```

## 3. Pass ModelParameters into AgentBasedModel

```{r}
model <- make_abm(mps)
```

## 4. Inspect Model contents

```{r}
model$get_parameter("n_agents")
model$get_parameter("adoption_rate")
model$get_parameter("learning_strategy")$get_label()

length(model$agents)

agent1 <- model$get_agent(1)
agent1$get_behavior()
agent1$get_neighbors()$length()

agent1$get_neighbors()$map(function(neigh) neigh$get_name())
```

## 5. Running multiple trials using parameters

```{r}
model_generator <- function(param_row) {
  mps <- make_model_parameters(
    n_agents = 5,
    adoption_rate = param_row$adoption_rate
  )
  
  abm <- make_abm(mps)
  abm$get_agent(1)$set_behavior("Adaptive")$set_fitness(2.0)
  return (abm) 
}

trials <- run_trials(
  model_generator, stop = socmod::fixated,
  n_trials_per_param = 20, adoption_rate = c(0.2, 0.8)
)

obs <- trials[[1]]$get_observations()
print(obs)

outcomes <- trials[[1]]$get_outcomes()
print(outcomes)

summary <- summarise_by_parameters(
  trials,
  input_parameters = "adoption_rate",
  outcome_measures = c("success_rate", "mean_fixation_steps")
)
print(summary)
```

## Note on parameter types

In `socmod`, all arguments passed to `make_model_parameters()` are routed into a `ModelParameters` object.

The constructor distinguishes between:

- **core parameters**: `n_agents`, `graph`, `learning_strategy`
- **auxiliary (or "free") parameters**: all other named arguments

Core parameters are assigned to dedicated fields. Auxiliary parameters are stored in a key-value map, retrievable via `get_parameter()` or `get_parameters()`.

When calling `run_trials(...)`, all `...` arguments are passed into `make_model_parameters()`. This allows specifying both core and auxiliary parameters directly in `run_trials()`.

## 6. Running trials over adoption_rate and learning_strategy (alternative approach)

```{r}
model_generator <- function(param_row) {
  mps <- make_model_parameters(
    n_agents = 5,
    adoption_rate = param_row$adoption_rate,
    learning_strategy = param_row$learning_strategy
  )
  make_abm(mps)
}

prevalence_summary <- socmod::run_trials(
    model_generator, n_trials_per_param = 5, 
    adoption_rate = c(0.2, 0.8), 
    learning_strategy = 
      c(socmod::contagion_learning_strategy)
  ) %>% 
  summarise_prevalence 

print(prevalence_summary, n = 20)

plot_prevalence(trial)
```

## 7. Running trials (correct idiomatic usage)

```{r}
model_generator <- function(param_row) {
  make_abm(make_model_parameters(
    n_agents = 5,
    adoption_rate = param_row$adoption_rate,
    learning_strategy = param_row$learning_strategy
  ))
}

trials <- run_trials(
  model_generator,
  n_trials_per_param = 2,
  adoption_rate = c(0.5, 0.9),
  learning_strategy = list(contagion_learning_strategy, frequency_bias_learning_strategy)
)

summary <- summarise_by_parameters(
  trials,
  input_parameters = c("adoption_rate", "learning_strategy"),
  outcome_measures = c("success_rate", "mean_fixation_steps")
)
print(summary)
```
