% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/analysis.R
\name{initialize_agents}
\alias{initialize_agents}
\title{Initialize agents with adaptive and legacy behaviors}
\usage{
initialize_agents(
  model,
  initial_prevalence = 0.1,
  adaptive_behavior = "Adaptive",
  adaptive_fitness = 1.2,
  legacy_behavior = "Legacy",
  legacy_fitness = 1
)
}
\arguments{
\item{model}{An \code{AgentBasedModel} instance.}

\item{initial_prevalence}{A proportion (0â€“1) or count of agents starting with the adaptive behavior.}

\item{adaptive_behavior}{Name of the adaptive behavior (default: "Adaptive").}

\item{adaptive_fitness}{Fitness value for adaptive behavior (default: 1.2).}

\item{legacy_behavior}{Name of the legacy behavior (default: "Legacy").}

\item{legacy_fitness}{Fitness value for legacy behavior (default: 1.0).}
}
\value{
Invisibly returns the model with updated agents.
}
\description{
Assigns behaviors and fitness values to agents in an AgentBasedModel.
Can initialize by proportion or fixed count of adaptive agents.
}
\examples{
# Create a model with 20 agents, 25\% with adaptive behavior
abm <- 
  make_abm(n_agents = 20) |> initialize_agents(initial_prevalence = 0.25)

# Count how many agents do each behavior
table(purrr::map_chr(abm$agents, ~ .x$get_behavior()))

# Summarize fitness values by behavior
tibble::tibble(
  behavior = purrr::map_chr(abm$agents, ~ .x$get_behavior()),
  fitness = purrr::map_dbl(abm$agents, ~ .x$get_fitness())
) |>
  dplyr::group_by(behavior) |>
  dplyr::summarise(count = dplyr::n(), 
                   mean_fitness = mean(fitness), 
                   .groups = "drop")
  
}
