[{"path":"https://css4s.github.io/socmod/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 socmod authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://css4s.github.io/socmod/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Matt Turner. Author, maintainer.","code":""},{"path":"https://css4s.github.io/socmod/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Turner M (2025). socmod: Models Social Behavior R. R package version 0.0.1, https://css4s.github.io/socmod/.","code":"@Manual{,   title = {socmod: Models of Social Behavior in R},   author = {Matt Turner},   year = {2025},   note = {R package version 0.0.1},   url = {https://css4s.github.io/socmod/}, }"},{"path":"https://css4s.github.io/socmod/index.html","id":"socmod","dir":"","previous_headings":"","what":"Models of Social Behavior in R","title":"Models of Social Behavior in R","text":"socmod provides framework utilities developing simulations social learning social influence structured social networks. developed support course Computational Social Science Sustainability Stanford Doerr School Sustainability. course teaches theory techniques understanding cognitive social mechanisms influencing beliefs behaviors can combined computational models predict relative efficacy different candidate interventions sustainability, e.g., promote ecological protection, public health, economic security justice, climate action, name just sustainable development goals. socmod flexible encapsulate social process can modeled follows: (1) individuals initialized knowledge payoff behaviors beliefs hold; (2) exchange information socially time teaching, observation, discourse, etc. process illustrated figure:  Currently focus socmod developing models informational behavioral interventions promote sustainable behaviors call adaptations, AA. yet AA said legacy behavior, LL. agent can assigned gain fitness tracked time, can linked whether AA LL. socmod provides tools initializing simulated individuals (.e., agents), social networks, behaviors. capabilities introduced simple example .","code":""},{"path":"https://css4s.github.io/socmod/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Models of Social Behavior in R","text":"can install development version socmod GitHub devtools pak: devtools pak","code":"# Install this if you don't have devtools. # install.packages(\"devtools\") # devtools::install_github(\"CSS4S/socmod\") # Install this if you don't have pak. # install.packages(\"pak\") # pak::pak(\"CSS4S/socmod\")"},{"path":"https://css4s.github.io/socmod/index.html","id":"quickstart-examples","dir":"","previous_headings":"","what":"Quickstart examples","title":"Models of Social Behavior in R","text":"understand socmod help organize develop models social behavior, let’s consider simple example just four individuals illustrated figure . initialize agents behaviors payoffs shown , explain use different social learning strategies simulate diffusion adaptation, AA. AA yields payoff 2 legacy LL behavior yields payoff 1. matters success-biased social learning strategy, frequency-biased strategy unbiased contagion learning. simple network nieghborhood individual/agent can initialize agents network follows. next code block first initialize four agents named “”, “n_i1”, “n_i2”, “n_i3” match illustration focal/learner agent ii three neighbors (one instance socmod::Agent class). create social network illustration using igraph. Finally, initialize new socmod::AgentBasedModel using helper function make_example_abm. next subsection use helper function initialize new models run frequency- success-biased adaptive learning strategies, using learning functions provided socmod. show define non-adaptive contagion learning functions, adapted compartmental epidemiological modeling.","code":"library(socmod)  # Example ABM builder with four agents as pictured above. Can pass arbitrary # named parameters in ... that will be passed to AgentBasedModel$new as params. make_example_abm <- function(...) {      n_agents <- 4        agent_behaviors <- c(\"Legacy\", \"Legacy\", \"Legacy\", \"Adaptive\")   agent_fitness <- c(1, 1, 1, 2)   agent_names <- c(\"i\", \"n_i1\", \"n_i2\", \"n_i3\")      make_example_agents <- function() {        agents <- purrr::map(       1:n_agents, \\(a_idx) {          Agent$new(behavior=agent_behaviors[a_idx],                    fitness=agent_fitness[a_idx],                    name=agent_names[a_idx])        }     )          return (agents)   }      agents <- make_example_agents()   # Initialize network.   socnet <- igraph::make_empty_graph(4, directed = FALSE)   # Set the vertex names.   igraph::V(socnet)$name <- agent_names      # Edges can be added like so where every two names specify an edge.   socnet <- igraph::add_edges(     socnet, c(\"i\", \"n_i1\", \"i\", \"n_i2\", \"i\", \"n_i3\", \"n_i2\", \"n_i3\")   )      # Create the agent-based model and plot the model's network.   return (AgentBasedModel$new(agents = agents, network = socnet, ...)) }  abm <- make_example_abm() plot(abm$network)"},{"path":[]},{"path":"https://css4s.github.io/socmod/index.html","id":"frequency-biased-adaptive-learning","dir":"","previous_headings":"Quickstart examples > Model dynamics with different adaptive social learning strategies","what":"Frequency-biased adaptive learning","title":"Models of Social Behavior in R","text":"frequency-biased transmission, probability learner adopts behavior proportional number network neighbors behavior. first time step, , ni2n_{i2} 1/2 probability adopting AA, ii 1/3 probability adopting AA. set agent-based model run frequency-biased learning dynamics. lot stochasticity setup, many model runs ending (t=50)=4A(t=50) = 4, fixating Adaptive behavior, many ending (t=50)=0A(t=50) = 0, fixating Legacy behavior.  can check many end AA LL fixated like , fixation AA counts adaptation “success”:","code":"library(ggplot2) abm <- make_example_abm()  result <- run(abm, 50, frequency_bias_select_teacher, frequency_bias_interact, iterate_learning_model)  ggplot(result$output, aes(x=t, y=A)) + geom_line() + theme_classic() n_trials <- 100 one_trial_success <- function(n_steps = 50) {   abm <- make_example_abm()   A_T <- run(     abm, n_steps, frequency_bias_select_teacher,      frequency_bias_interact, iterate_learning_model   )$output$A[n_steps]      return (ifelse(A_T == 4, 1, 0)) }  n_success <- sum(purrr::map_vec(1:n_trials, \\(.) {one_trial_success()}));  success_rate <- n_success / n_trials print(paste(\"Success rate:\", success_rate)) #> [1] \"Success rate: 0.27\""},{"path":"https://css4s.github.io/socmod/index.html","id":"success-biased-adaptive-learning","dir":"","previous_headings":"Quickstart examples > Model dynamics with different adaptive social learning strategies","what":"Success-biased adaptive learning","title":"Models of Social Behavior in R","text":"success-biased transmission, probability learner adopts behavior proportional relative fitness neighbors. Note simplest model success-biased transmission, one agent AA, agent always adopts LL first time step. version currently provided socmod. Adding additional adaptive logic making evitable left exercise. one can run model success-biased learning:","code":"library(ggplot2) abm <- make_example_abm()  result <- run(abm, 50, success_bias_select_teacher, success_bias_interact, iterate_learning_model)  ggplot(result$output, aes(x=t, y=A)) + geom_line() + theme_classic() n_trials <- 100 one_trial_success <- function(n_steps = 50) {   abm <- make_example_abm()   A_T <- run(     abm, n_steps, success_bias_select_teacher,      success_bias_interact, iterate_learning_model   )$output$A[n_steps]      return (ifelse(A_T == 4, 1, 0)) }  n_success <- sum(purrr::map_vec(1:n_trials, \\(.) {one_trial_success()}));  success_rate <- n_success / n_trials print(paste(\"Success rate:\", success_rate)) #> [1] \"Success rate: 0.68\""},{"path":"https://css4s.github.io/socmod/index.html","id":"model-dynamics-with-non-adaptive-contagion-learning","dir":"","previous_headings":"Quickstart examples","what":"Model dynamics with non-adaptive contagion learning","title":"Models of Social Behavior in R","text":"Now show define custom learning functions using non-adaptive contagion learning example. contagion learning, learner adopts interaction partner teacher’s behavior probability α\\alpha, called adoption rate. can also provide drop rate represents probability individual stops adaptive behavior. can define contagion learning functions follows, assuming partner selection random. Initialize new agent-based model run contagion learning dynamics:","code":"contagion_partner_selection <- function(learner, model) {   return (sample(learner$neighbors$agents, 1)[[1]]) }  contagion_interaction <- function(learner, teacher, model) {    if ((learner$curr_behavior == \"Legacy\") &&        (teacher$curr_behavior == \"Adaptive\") &&        (runif(1) < model$params$adopt_rate)) { # this is how we implement prob learning w/ alpha     learner$next_behavior <- \"Adaptive\"     learner$next_fitness <- 2.0   } }  contagion_model_step <- function(model) {   # If drop rate is non-zero, get a list of agents who will drop the behavior   # if they are doing the Adaptive behavior.   if (model$params$drop_rate > 0) {     agent_drop <- runif(model$n_agents) < model$params$drop_rate          for (agent in abm$agents[agent_drop]) {       if (agent$curr_behavior == \"Adaptive\") {         agent$next_behavior <- \"Legacy\"         agent$next_fitness <- 1.0       }     }   }      # Basic learning step where the next behaviors and payoffs become current.   iterate_learning_model(model) } library(ggplot2)   abm <- make_example_abm(adopt_rate = 0.2, drop_rate = 0.02) result <- run(abm, 100, contagion_partner_selection, contagion_interaction,               contagion_model_step)  ggplot(result$output, aes(x=t, y=A)) + geom_line() + theme_classic()"},{"path":"https://css4s.github.io/socmod/index.html","id":"more-information-and-the-philosophy-of-socmod","dir":"","previous_headings":"","what":"More information and the philosophy of socmod","title":"Models of Social Behavior in R","text":"Different models social behavior specified details many individuals population, behaviors opinions , benefits accrue(d) behaviors, learn influence one another, environmental relevant factors. framework seeks encapsulate different approaches modeling diverse social behaviors, thoroughly reviewed Paul Smaldino’s (2023) textbook Modeling Social Behavior. Technically, socmod uses object-oriented programming, provided R6, functional-style agent model behavior specification inspired Agents.jl, enjoyed using. , still plotting R, beginning students across disciplines tend know R Julia. R also seems great community r-lib project seems bringing continuity scientific programming seen programming language.","code":""},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":null,"dir":"Reference","previous_headings":"","what":"Agent for use with AgentBasedModel instances — Agent","title":"Agent for use with AgentBasedModel instances — Agent","text":"Agent attributes include information previous, current, next behaviors, neighbors (instance Neighbors class). Use class methods calculate exposure probability, add neighbors, set agent fitness.","code":""},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Agent for use with AgentBasedModel instances — Agent","text":"prev_behavior Previous agent behavior. curr_behavior Current agent behavior. next_behavior Next behavior agent , depending iterate_model. neighbors Initial set neighbors. curr_fitness Current agent fitness. next_fitness Next fitness next behavior. name Agent's name.","code":""},{"path":[]},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Agent for use with AgentBasedModel instances — Agent","text":"Agent$new() Agent$add_neighbors() Agent$exposure_prob() Agent$set_fitness() Agent$clone()","code":""},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Agent for use with AgentBasedModel instances — Agent","text":"Create new Agent instance.","code":""},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Agent for use with AgentBasedModel instances — Agent","text":"","code":"Agent$new(behavior = \"\", fitness = 0, name = \"\", neighbors = c())"},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Agent for use with AgentBasedModel instances — Agent","text":"behavior Initial agent behavior. fitness Agent fitness. name Agent name; unique maybe face unexpected problems. neighbors Initialize neighbors; typically done ABM initialization.","code":""},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Agent for use with AgentBasedModel instances — Agent","text":"new Agent object. Add agents agent's neighbor field","code":""},{"path":[]},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Agent for use with AgentBasedModel instances — Agent","text":"","code":"Agent$add_neighbors(new_neighbors)"},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Agent for use with AgentBasedModel instances — Agent","text":"new_neighbors List Agents add neighbors.","code":""},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Agent for use with AgentBasedModel instances — Agent","text":"self (Agent) Calculate exposure probability agent.","code":""},{"path":[]},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Agent for use with AgentBasedModel instances — Agent","text":"","code":"Agent$exposure_prob()"},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Agent for use with AgentBasedModel instances — Agent","text":"Float ≥ 0 ≤ 1 representing probability non-trivial exposure adaptive behavior, non-trivial exposure means learner legacy behavior selects agent adaptive behavior. Set agent's current fitness value.","code":""},{"path":[]},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Agent for use with AgentBasedModel instances — Agent","text":"","code":"Agent$set_fitness(fitness)"},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Agent for use with AgentBasedModel instances — Agent","text":"fitness fitness assign.","code":""},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Agent for use with AgentBasedModel instances — Agent","text":"self","code":""},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Agent for use with AgentBasedModel instances — Agent","text":"objects class cloneable method.","code":""},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Agent for use with AgentBasedModel instances — Agent","text":"","code":"Agent$clone(deep = FALSE)"},{"path":"https://css4s.github.io/socmod/reference/Agent.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Agent for use with AgentBasedModel instances — Agent","text":"deep Whether make deep clone.","code":""},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":null,"dir":"Reference","previous_headings":"","what":"socmod implementation of an agent-based model — AgentBasedModel","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"class encapsulates model's agents, network structures interactions, static dynamic model parameters, model state, model outputs.","code":""},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"agents Named list agents step Time step integer index network Social network structures agent interactions params Model parameters use partner selection, interaction functions, output Model output, either initiated appended depending model run yet. Create new agent-based model.","code":""},{"path":[]},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"AgentBasedModel$new() AgentBasedModel$add_agents() AgentBasedModel$get_agent() AgentBasedModel$clone()","code":""},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"Agent-based models may initialized one three ways: (1) providing agents social network structures interaction; (2) providing social network; (3) provide number agents , create add complete graph.","code":""},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"","code":"AgentBasedModel$new(agents = NULL, network = NULL, n_agents = NULL, ...)"},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"agents List agents agent-based model. network igraph Graph instance representing ABM social network n_agents Number agents.] ... Additional kwargs become entries AgentBasedModel$params field","code":""},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"self New agent-based model initialized specified. Add agents model.","code":""},{"path":[]},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"","code":"AgentBasedModel$add_agents(agents_to_add)"},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"agents_to_add Insert list new agents list existing agents. Get agent model name.","code":""},{"path":[]},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"","code":"AgentBasedModel$get_agent(name)"},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"name Name agent, usually integer string","code":""},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"objects class cloneable method.","code":""},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"","code":"AgentBasedModel$clone(deep = FALSE)"},{"path":"https://css4s.github.io/socmod/reference/AgentBasedModel.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"socmod implementation of an agent-based model — AgentBasedModel","text":"deep Whether make deep clone.","code":""},{"path":"https://css4s.github.io/socmod/reference/G_NM.html","id":null,"dir":"Reference","previous_headings":"","what":"Erdős-Rényi random graph G(N, M). — G_NM","title":"Erdős-Rényi random graph G(N, M). — G_NM","text":"Erdős-Rényi random graph G(N, M).","code":""},{"path":"https://css4s.github.io/socmod/reference/G_NM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Erdős-Rényi random graph G(N, M). — G_NM","text":"","code":"G_NM(N, M)"},{"path":"https://css4s.github.io/socmod/reference/G_NM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Erdős-Rényi random graph G(N, M). — G_NM","text":"N number nodes/agents M number edges randomly assigned","code":""},{"path":"https://css4s.github.io/socmod/reference/G_NM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Erdős-Rényi random graph G(N, M). — G_NM","text":"igraph Graph instance","code":""},{"path":"https://css4s.github.io/socmod/reference/G_NM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Erdős-Rényi random graph G(N, M). — G_NM","text":"","code":"# Create a 10-node network with 10 randomly-assigned edges library(igraph) #>  #> Attaching package: ‘igraph’ #> The following objects are masked from ‘package:stats’: #>  #>     decompose, spectrum #> The following object is masked from ‘package:base’: #>  #>     union net <- G_NM(10, 10) plot(net)"},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Encapsulation of an agent's neighbors. — Neighbors","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"Encapsulate neighbors easily access name, know many , check agent among another's neighbors, map function across agents.","code":""},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"agents Get neighbors list agents. n Number neighbors Create new instance Neighbors using list Agents.","code":""},{"path":[]},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"Neighbors$new() Neighbors$get() Neighbors$map() Neighbors$contains() Neighbors$clone()","code":""},{"path":[]},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"","code":"Neighbors$new(agents)"},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"agents agents included neighbors. Get neighbor name, returning NULL named agent neighbor.","code":""},{"path":[]},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"","code":"Neighbors$get(name)"},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"name Agent name Wrap purrr::map apply function neighbor agents.","code":""},{"path":[]},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"","code":"Neighbors$map(f)"},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"f Function apply neighbors.","code":""},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"result mapping, self Check name agent one neighbors.","code":""},{"path":[]},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"","code":"Neighbors$contains(name)"},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"name Name agent check.","code":""},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"boolean indicating whether named agent neighbor","code":""},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"objects class cloneable method.","code":""},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"","code":"Neighbors$clone(deep = FALSE)"},{"path":"https://css4s.github.io/socmod/reference/Neighbors.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encapsulation of an agent's neighbors. — Neighbors","text":"deep Whether make deep clone.","code":""},{"path":"https://css4s.github.io/socmod/reference/add_unique_edge.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an undirected edge from v1 to v2 to graph g if it does not already exist. — add_unique_edge","title":"Add an undirected edge from v1 to v2 to graph g if it does not already exist. — add_unique_edge","text":"Add undirected edge v1 v2 graph g already exist.","code":""},{"path":"https://css4s.github.io/socmod/reference/add_unique_edge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an undirected edge from v1 to v2 to graph g if it does not already exist. — add_unique_edge","text":"","code":"add_unique_edge(g, v1, v2)"},{"path":"https://css4s.github.io/socmod/reference/add_unique_edge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an undirected edge from v1 to v2 to graph g if it does not already exist. — add_unique_edge","text":"g Graph representing social network v1 First node edge pair v2 Second node edge pair","code":""},{"path":"https://css4s.github.io/socmod/reference/add_unique_edge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an undirected edge from v1 to v2 to graph g if it does not already exist. — add_unique_edge","text":"igraph Graph","code":""},{"path":"https://css4s.github.io/socmod/reference/add_unique_edge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an undirected edge from v1 to v2 to graph g if it does not already exist. — add_unique_edge","text":"","code":"# Add one unique edge between nodes 1 and 4 to empty ten-node network g <- igraph::make_empty_graph(n = 10) g <- add_unique_edge(g, 1, 4)"},{"path":"https://css4s.github.io/socmod/reference/frequency_bias_interact.html","id":null,"dir":"Reference","previous_headings":"","what":"Interaction function for frequency-biased adaptive learning. — frequency_bias_interact","title":"Interaction function for frequency-biased adaptive learning. — frequency_bias_interact","text":"Interaction function frequency-biased adaptive learning.","code":""},{"path":"https://css4s.github.io/socmod/reference/frequency_bias_interact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interaction function for frequency-biased adaptive learning. — frequency_bias_interact","text":"","code":"frequency_bias_interact(learner, ., model)"},{"path":"https://css4s.github.io/socmod/reference/frequency_bias_interact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interaction function for frequency-biased adaptive learning. — frequency_bias_interact","text":"learner Agent currently selected learner. . selected teacher frequency-biased learning. model Model variable agent-based model.","code":""},{"path":"https://css4s.github.io/socmod/reference/frequency_bias_interact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interaction function for frequency-biased adaptive learning. — frequency_bias_interact","text":"","code":"net <- regular_lattice(10, 4) model <- AgentBasedModel$new(network = net) output <- run(model, 10, interact = frequency_bias_interact)"},{"path":"https://css4s.github.io/socmod/reference/frequency_bias_select_teacher.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequency biased teacher selection does nothing — frequency_bias_select_teacher","title":"Frequency biased teacher selection does nothing — frequency_bias_select_teacher","text":"use teacher selection frequency bias since \"\" bias, \"\" bias.","code":""},{"path":"https://css4s.github.io/socmod/reference/frequency_bias_select_teacher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequency biased teacher selection does nothing — frequency_bias_select_teacher","text":"","code":"frequency_bias_select_teacher(agent, model)"},{"path":"https://css4s.github.io/socmod/reference/get_all_possible_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all possible edges between node indices 1 to N for either directed or undirected networks. — get_all_possible_edges","title":"Get all possible edges between node indices 1 to N for either directed or undirected networks. — get_all_possible_edges","text":"Get possible edges node indices 1 N either directed undirected networks.","code":""},{"path":"https://css4s.github.io/socmod/reference/get_all_possible_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all possible edges between node indices 1 to N for either directed or undirected networks. — get_all_possible_edges","text":"","code":"get_all_possible_edges(N, directed = FALSE)"},{"path":"https://css4s.github.io/socmod/reference/get_all_possible_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all possible edges between node indices 1 to N for either directed or undirected networks. — get_all_possible_edges","text":"N number nodes directed Whether possible edges directed graphs","code":""},{"path":"https://css4s.github.io/socmod/reference/get_all_possible_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all possible edges between node indices 1 to N for either directed or undirected networks. — get_all_possible_edges","text":"table node pairs representing edges","code":""},{"path":"https://css4s.github.io/socmod/reference/get_all_possible_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all possible edges between node indices 1 to N for either directed or undirected networks. — get_all_possible_edges","text":"","code":"# Get a table of vertex pairs representing possible edges with ten vertices. Epossible <- get_all_possible_edges(10)"},{"path":"https://css4s.github.io/socmod/reference/iterate_learning_model.html","id":null,"dir":"Reference","previous_headings":"","what":"A generic method for iterating a learning model, setting the current behavior and fitness to be whatever was identified as the next behavior and fitness. — iterate_learning_model","title":"A generic method for iterating a learning model, setting the current behavior and fitness to be whatever was identified as the next behavior and fitness. — iterate_learning_model","text":"generic method iterating learning model, setting current behavior fitness whatever identified next behavior fitness.","code":""},{"path":"https://css4s.github.io/socmod/reference/iterate_learning_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A generic method for iterating a learning model, setting the current behavior and fitness to be whatever was identified as the next behavior and fitness. — iterate_learning_model","text":"","code":"iterate_learning_model(model)"},{"path":"https://css4s.github.io/socmod/reference/iterate_learning_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A generic method for iterating a learning model, setting the current behavior and fitness to be whatever was identified as the next behavior and fitness. — iterate_learning_model","text":"NULL Operates -place update agent's behavior necessary.","code":""},{"path":"https://css4s.github.io/socmod/reference/iterate_learning_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A generic method for iterating a learning model, setting the current behavior and fitness to be whatever was identified as the next behavior and fitness. — iterate_learning_model","text":"","code":"net <- regular_lattice(10, 4) model <- AgentBasedModel$new(network = net) output <- run(model, 10, interact = frequency_bias_interact,                iterate_model = iterate_learning_model)"},{"path":"https://css4s.github.io/socmod/reference/not_adjacent.html","id":null,"dir":"Reference","previous_headings":"","what":"Check two vertices are not adjacent. — not_adjacent","title":"Check two vertices are not adjacent. — not_adjacent","text":"Check two vertices adjacent.","code":""},{"path":"https://css4s.github.io/socmod/reference/not_adjacent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check two vertices are not adjacent. — not_adjacent","text":"","code":"not_adjacent(g, v1, v2)"},{"path":"https://css4s.github.io/socmod/reference/not_adjacent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check two vertices are not adjacent. — not_adjacent","text":"g Graph v1 Vertex/agent/node 1 v2 Vertex/agent/node 2","code":""},{"path":"https://css4s.github.io/socmod/reference/not_adjacent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check two vertices are not adjacent. — not_adjacent","text":"bool indicating whether two vertices v1 v2 adjacent g","code":""},{"path":"https://css4s.github.io/socmod/reference/regular_lattice.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a regular lattice graph. — regular_lattice","title":"Create a regular lattice graph. — regular_lattice","text":"Adapted https://github.com/USCCANA/netdiffuseR/blob/1efc0be4539d23ab800187c73551624834038e00/src/rgraph.cpp#L90 Difference use undirected now, need adjust default (see also NetLogo routine Smaldino Ch. 9 p. 266). Beacaus igraph flexible, add duplicate edges, check make sure edge exist two nodes adding , using igraph::are_adjacent function (\"adjacent\" means edge two nodes undirected graph–directed graph definition subjective, .e., v1 v2 sometimes defined adjacent edge v1 v2, others define adjacency edge v2 v1).","code":""},{"path":"https://css4s.github.io/socmod/reference/regular_lattice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a regular lattice graph. — regular_lattice","text":"","code":"regular_lattice(N, k, directed = FALSE)"},{"path":"https://css4s.github.io/socmod/reference/regular_lattice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a regular lattice graph. — regular_lattice","text":"N number nodes k node degree directed Whether graph directed","code":""},{"path":"https://css4s.github.io/socmod/reference/regular_lattice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a regular lattice graph. — regular_lattice","text":"igraph Graph","code":""},{"path":"https://css4s.github.io/socmod/reference/regular_lattice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a regular lattice graph. — regular_lattice","text":"","code":"# Make a 10-node lattice with nodes degree 4. net <- regular_lattice(10, 4) plot(net)"},{"path":"https://css4s.github.io/socmod/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an agent-based model for either a number of iterations (max_its) or until some stop condition is met (e.g., fixation). — run","title":"Run an agent-based model for either a number of iterations (max_its) or until some stop condition is met (e.g., fixation). — run","text":"Run agent-based model either number iterations (max_its) stop condition met (e.g., fixation).","code":""},{"path":"https://css4s.github.io/socmod/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an agent-based model for either a number of iterations (max_its) or until some stop condition is met (e.g., fixation). — run","text":"","code":"run(   model,   max_its = 1,   partner_selection = partner_selection_default,   interaction = interaction_default,   iterate_model = iterate_model_default,   stop_cond = stop_cond_default )"},{"path":"https://css4s.github.io/socmod/reference/run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an agent-based model for either a number of iterations (max_its) or until some stop condition is met (e.g., fixation). — run","text":"model  max_its  partner_selection  interaction  iterate_model  stop_cond","code":""},{"path":"https://css4s.github.io/socmod/reference/socmod-package.html","id":null,"dir":"Reference","previous_headings":"","what":"socmod: Models of Social Behavior in R — socmod-package","title":"socmod: Models of Social Behavior in R — socmod-package","text":"Provides conceptual framework software tools creating computational models social behavior decision making.","code":""},{"path":[]},{"path":"https://css4s.github.io/socmod/reference/socmod-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"socmod: Models of Social Behavior in R — socmod-package","text":"Maintainer: Matt Turner maturner01@gmail.com (ORCID)","code":""},{"path":"https://css4s.github.io/socmod/reference/success_bias_interact.html","id":null,"dir":"Reference","previous_headings":"","what":"Success-biased interaction to be paired with success_bias_teacher_selection that sets the learner's next behavior and fitness to be the teacher's current behavior and fitness. — success_bias_interact","title":"Success-biased interaction to be paired with success_bias_teacher_selection that sets the learner's next behavior and fitness to be the teacher's current behavior and fitness. — success_bias_interact","text":"Success-biased interaction paired success_bias_teacher_selection sets learner's next behavior fitness teacher's current behavior fitness.","code":""},{"path":"https://css4s.github.io/socmod/reference/success_bias_interact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Success-biased interaction to be paired with success_bias_teacher_selection that sets the learner's next behavior and fitness to be the teacher's current behavior and fitness. — success_bias_interact","text":"","code":"success_bias_interact(learner, teacher, model)"},{"path":"https://css4s.github.io/socmod/reference/success_bias_interact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Success-biased interaction to be paired with success_bias_teacher_selection that sets the learner's next behavior and fitness to be the teacher's current behavior and fitness. — success_bias_interact","text":"","code":"net <- regular_lattice(10, 4) model <- AgentBasedModel$new(network = net) for (agent in model$agents) {   # Agents need non-zero fitness for success bias to work   agent$curr_fitness <- 1 } output <- run(model, 10,                interact = success_bias_interact,                partner_selection = success_bias_select_teacher,               iterate_model = iterate_learning_model)"},{"path":"https://css4s.github.io/socmod/reference/success_bias_select_teacher.html","id":null,"dir":"Reference","previous_headings":"","what":"Success-biased teacher selection — success_bias_select_teacher","title":"Success-biased teacher selection — success_bias_select_teacher","text":"probability selection one agent's neighbors proportional fitness relative neighbors.","code":""},{"path":"https://css4s.github.io/socmod/reference/success_bias_select_teacher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Success-biased teacher selection — success_bias_select_teacher","text":"","code":"success_bias_select_teacher(learner, model)"},{"path":"https://css4s.github.io/socmod/reference/success_bias_select_teacher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Success-biased teacher selection — success_bias_select_teacher","text":"learner focal learner agent model Agent-based model run specification.","code":""},{"path":"https://css4s.github.io/socmod/reference/success_bias_select_teacher.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Success-biased teacher selection — success_bias_select_teacher","text":"Agent selected neighbors teacher.","code":""},{"path":"https://css4s.github.io/socmod/reference/success_bias_select_teacher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Success-biased teacher selection — success_bias_select_teacher","text":"","code":"net <- regular_lattice(10, 4) model <- AgentBasedModel$new(network = net) for (agent in model$agents) {   # Agents need non-zero fitness for success bias to work   agent$curr_fitness <- 1 } output <- run(model, 10,                interact = success_bias_interact,                partner_selection = success_bias_select_teacher,               iterate_model = iterate_learning_model)"}]
